#!/usr/bin/ruby

require 'optparse'
require 'rubygems'
gem 'aws-sdk'
require 'aws-sdk'
require 'erb'

bundle_exists = if RUBY_VERSION[0..2] == '1.8'
 Gem.available?('bundler')
else
 Gem::Specification::find_all_by_name('bundler').any?
end

options = {}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options]"
 
  # Define the options, and what they do
  options[:no_update] = false
  opts.on( '--no-update', 'Do not update crontab after making leader' ) do
   options[:no_update] = true
  end

  # This displays the help screen, all programs are
  # assumed to have this option.
  opts.on( '-h', '--help', 'Display this screen' ) do
   puts opts
   exit
  end
end

optparse.parse!

ENVIRONMENT_NAME_FILE = "/var/app/support/env_name"
AWS_CREDENTIALS = YAML.load(ERB.new(File.read("config/whenever-elasticbeanstalk.yml")).result)[ENV["RAILS_ENV"]]

instance_id = if File.exists?("/var/app/support/instance_id")
  File.read("/var/app/support/instance_id")
else
  if id = `/opt/aws/bin/ec2-metadata -i | awk '{print $2}'`.strip
    File.open("/var/app/support/instance_id", 'w') {|f| f.write(id) }
    id
  end
end

AWS.config(AWS_CREDENTIALS)
ec2 = AWS::EC2.new

environment_name = if File.exists?(ENVIRONMENT_NAME_FILE)
  File.read(ENVIRONMENT_NAME_FILE)
else
  env_name = ec2.instances[instance_id].tags["elasticbeanstalk:environment-name"]
  File.open(ENVIRONMENT_NAME_FILE, 'w') {|f| f.write(env_name) }
  env_name
end

leader_instances = ec2.instances.inject([]) do |m, i|
  m << i.id if i.tags["elasticbeanstalk:environment-name"] == environment_name &&
    i.status == :running &&
    i.tags["leader"] == "true"
  m
end

if leader_instances.count < 1
  instance_id = `/opt/aws/bin/ec2-metadata -i | awk '{print $2}'`.strip
  ec2.instances[instance_id].tags["leader"] = "true"
end

unless options[:no_update]
  bundle_exists ? `bundle exec setup_cron` : `setup_cron`
end