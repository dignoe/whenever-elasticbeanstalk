#!/usr/bin/env ruby

# This file is based heavily on Whenever's 'wheneverize' command

require 'optparse'
require 'fileutils'
require 'erb'

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [path]"

  begin
    opts.parse!(ARGV)
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
end

unless ARGV.empty?
  if !File.exists?(ARGV.first)
    abort "`#{ARGV.first}' does not exist."
  elsif !File.directory?(ARGV.first)
    abort "`#{ARGV.first}' is not a directory."
  elsif ARGV.length > 1
    abort "Too many arguments; please specify only the directory to wheneverize."
  end
end

base = ARGV.empty? ? '.' : ARGV.shift

schedule_content = <<-FILE
# Use this file to easily define all of your cron jobs.
#
# It's helpful, but not entirely necessary to understand cron before proceeding.
# http://en.wikipedia.org/wiki/Cron

# Example:
#
# set :output, "/path/to/my/cron_log.log"
#
# every 2.hours do
#   command "/usr/bin/some_great_command"
#   runner "MyModel.some_method"
#   rake "some:great:rake:task"
# end
#
# every 4.days do
#   runner "AnotherModel.prune_old_records"
# end

# Learn more: http://github.com/javan/whenever

every 1.minute do
  command "cd /var/app/current && /usr/local/bin/bundle exec ensure_one_cron_leader"
end
FILE

file = 'config/schedule.rb'
file = File.join(base, file)
if File.exists?(file)
  warn "[skip] `#{file}' already exists"
elsif File.exists?(file.downcase)
  warn "[skip] `#{file.downcase}' exists, which could conflict with `#{file}'"
elsif !File.exists?(File.dirname(file))
  warn "[skip] directory `#{File.dirname(file)}' does not exist"
else
  puts "[add] writing `#{file}'"
  File.open(file, "w") { |f| f.write(schedule_content) }
end


eb_config_content = <<-FILE
files:
  # Reload the on deployment
  /opt/elasticbeanstalk/hooks/appdeploy/post/10_reload_cron.sh:
    mode: "00700"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      # Loading environment data
      EB_SCRIPT_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k script_dir)
      EB_SUPPORT_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k support_dir)
      EB_APP_CURRENT_DIR=$(/opt/elasticbeanstalk/bin/get-config container -k app_deploy_dir)

      # Setting up correct environment and ruby version so that bundle can load all gems
      . $EB_SUPPORT_DIR/envvars
      . $EB_SCRIPT_DIR/use-app-ruby.sh

      cd $EB_APP_CURRENT_DIR
      /usr/local/bin/bundle exec setup_cron
commands:
  create_bundle_symlink_patch:
    test: test ! -f /usr/local/bin/bundle
    command: ln -s `su -l -s /bin/bash -c "which bundle" $(/opt/elasticbeanstalk/bin/get-config container -k app_user)` /usr/local/bin/bundle
    ignoreErrors: true
container_commands:
  cron_01_set_leader:
    test: test ! -f /opt/elasticbeanstalk/containerfiles/.cron-setup-complete || test ! -f /opt/elasticbeanstalk/support/.cron-setup-complete
    leader_only: true
    cwd: /var/app/ondeck
    command: su -l -s /bin/bash -c "/usr/local/bin/bundle exec create_cron_leader --no-update" $(/opt/elasticbeanstalk/bin/get-config container -k app_user)
  cron_02_write_cron_setup_complete_file_containerfiles:
    test: test -d /opt/elasticbeanstalk/containerfiles
    command: touch /opt/elasticbeanstalk/containerfiles/.cron-setup-complete
    ignoreErrors: true
  cron_02_write_cron_setup_complete_file_support:
    test: test -d /opt/elasticbeanstalk/support
    command: touch /opt/elasticbeanstalk/support/.cron-setup-complete
    ignoreErrors: true
FILE

file = '.ebextensions/cron.config'
file = File.join(base, file)
if File.exists?(file)
  warn "[skip] `#{file}' already exists"
elsif File.exists?(file.downcase)
  warn "[skip] `#{file.downcase}' exists, which could conflict with `#{file}'"
elsif !File.exists?(File.dirname(file))
  warn "[skip] directory `#{File.dirname(file)}' does not exist"
else
  puts "[add] writing `#{file}'"
  File.open(file, "w") { |f| f.write(eb_config_content) }
end


aws_credentials_content = <<-FILE
staging:
  access_key_id: ''
  secret_access_key: ''
production:
  access_key_id: ''
  secret_access_key: ''
FILE

file = 'config/whenever-elasticbeanstalk.yml'
file = File.join(base, file)
if File.exists?(file)
  warn "[skip] `#{file}' already exists"
elsif File.exists?(file.downcase)
  warn "[skip] `#{file.downcase}' exists, which could conflict with `#{file}'"
elsif !File.exists?(File.dirname(file))
  warn "[skip] directory `#{File.dirname(file)}' does not exist"
else
  puts "[add] writing `#{file}'"
  File.open(file, "w") { |f| f.write(aws_credentials_content) }
end

puts "[done] wheneverized for Elastic Beanstalk!"
